
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.*; 

public class BagOfWords {
	
	ArrayList<HashMap<String,Integer>> samples;
	
	public BagOfWords(){
		 samples = new ArrayList<HashMap<String,Integer>>();
	}
	
	public static void main(String[] args){
		
		System.out.println("Load Call " + args[0]);
		BagOfWords bag = new BagOfWords();
		bag.addManyCallsToSvm(args[0]);
		
		System.out.println(bag.samples);
		
	}
	
	private void addNewVectorToKernel(HashMap<String, Integer> vec){
		samples.add(vec);
	}
	
	
	
	public HashMap<String, Integer> getMappingVector(String fileName){
		String transcript = getTextFromFilePath(fileName);
		String[] wordArray = getWordsArray(transcript);
		HashMap<String, Integer> mapping = new HashMap<String, Integer>();
		
		for(String word : wordArray){
			
			if(mapping.containsKey(word)){
				mapping.put(word, mapping.get(word) + 1);
			}else{
				mapping.put(word,  1);
			}
		}
		
		return mapping;
	}
	
	/**
	 * label : true - wants to call boss after , 
	 * false - does not want to call boss after
	 * @param fileName
	 * @param label
	 */
	public String[] getWordsArray(String transcript){
		String[] arr = transcript.split("[\n ]");
		
		for(int i = 0 ; i < arr.length ; i++){
			arr[i] = arr[i].replace("\n", "");
			System.out.println(arr[i]);
		}
		
		return arr;		
	}
	
	public String getTextFromFilePath(String filePath){
		String text = "";
		try {
			text = new String(Files.readAllBytes(Paths.get(filePath)), StandardCharsets.UTF_8);
			
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.out.println("get Text from file path " + filePath + " has failed");
		}
		
		System.out.println("Read File : " + filePath);
		
		return text;
		
	}
	
	/**
	 * Input folder name and all calls will be uploaded to kernel
	 * @param folderName
	 */
	public void addManyCallsToSvm(String folderName){
		File folder = new File(folderName);
		File[] listOfFiles = folder.listFiles();
		for(File fl : listOfFiles){
			addNewVectorToKernel(getMappingVector(fl.getAbsolutePath()));
		}
		
		
	}
	
	public void buildSupportVector(){
		
		
	}
	
	/*
	 * Return 1 on wants to call boss
	 * return 0 on does not want to call boss
	 * returns -1 on error
	 */
	public int shouldCallBoss(String filename){
		
		
		
		return 1;
		
	}
	

}
